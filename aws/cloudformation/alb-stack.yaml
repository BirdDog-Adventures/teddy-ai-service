AWSTemplateFormatVersion: '2010-09-09'
Description: 'Application Load Balancer for Teddy AI Service'

Parameters:
  ProjectName:
    Type: String
    Description: Name of the project
    Default: teddy-ai
  
  Environment:
    Type: String
    Description: Environment name
    AllowedValues: [dev, stage, prod]
    Default: dev
  
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID where resources will be created
  
  SubnetIds:
    Type: CommaDelimitedList
    Description: Subnet IDs for the ALB (at least 2 in different AZs)
  
  CertificateArn:
    Type: String
    Description: ACM Certificate ARN for HTTPS (optional)
    Default: ""
  
  ContainerPort:
    Type: Number
    Description: Port the container listens on
    Default: 8000
  
  HealthCheckPath:
    Type: String
    Description: Health check path
    Default: "/api/v1/health"

Conditions:
  HasCertificate: !Not [!Equals [!Ref CertificateArn, ""]]

Resources:
  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${Environment}-${ProjectName}-alb'
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      Subnets: !Ref SubnetIds
      SecurityGroups:
        - !ImportValue
          Fn::Sub: '${Environment}-${ProjectName}-alb-sg-id'
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-${ProjectName}-alb'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${Environment}-${ProjectName}-tg'
      Port: !Ref ContainerPort
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-${ProjectName}-tg'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # HTTP Listener
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - !If
          - HasCertificate
          - Type: redirect
            RedirectConfig:
              Protocol: HTTPS
              Port: 443
              StatusCode: HTTP_301
          - Type: forward
            TargetGroupArn: !Ref TargetGroup

  # HTTPS Listener (only if certificate is provided)
  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: HasCertificate
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

Outputs:
  LoadBalancerArn:
    Description: Application Load Balancer ARN
    Value: !Ref ApplicationLoadBalancer
    Export:
      Name: !Sub '${Environment}-${ProjectName}-alb-arn'
  
  LoadBalancerDNSName:
    Description: Application Load Balancer DNS Name
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub '${Environment}-${ProjectName}-alb-dns'
  
  ALBDNSName:
    Description: ALB DNS Name (for compatibility)
    Value: !GetAtt ApplicationLoadBalancer.DNSName
  
  TargetGroupArn:
    Description: Target Group ARN
    Value: !Ref TargetGroup
    Export:
      Name: !Sub '${Environment}-${ProjectName}-tg-arn'
  
  LoadBalancerHostedZoneID:
    Description: Application Load Balancer Hosted Zone ID
    Value: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID
    Export:
      Name: !Sub '${Environment}-${ProjectName}-alb-zone-id'
